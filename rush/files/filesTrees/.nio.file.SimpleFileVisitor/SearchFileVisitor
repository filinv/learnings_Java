import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.List;

public class SearchFileVisitor extends SimpleFileVisitor<Path> {
    private String partOfName;
    private String partOfContent;
    private int minSize;
    private int maxSize;
    private List<Path> foundFiles;

    public SearchFileVisitor() {
        foundFiles = new ArrayList<Path>();
        partOfName = null;
        partOfContent = null;
        minSize = -1;
        maxSize = -1;
    }
    @Override
    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        byte[] content = Files.readAllBytes(file); // размер файла: content.length
        boolean containsName = partOfName ==null || file.getFileName().toString().contains(partOfName);
        //String content = new String(Files.readAllBytes(file));
        boolean containsContent = partOfContent ==null || new String(content).contains(partOfContent);
        boolean satisfactMinSize= minSize == -1 || content.length>=minSize;
        boolean satistactMaxSize=maxSize == -1 || content.length<=maxSize;

        if(containsName && containsContent && satisfactMinSize && satistactMaxSize) foundFiles.add(file);
        //return FileVisitResult.CONTINUE;
        return super.visitFile(file, attrs);
    }
    public void setPartOfName(String partOfName) {
        this.partOfName = partOfName;
    }
    public void setPartOfContent(String partOfContent) {
        this.partOfContent = partOfContent;
    }
    public void setMinSize(int minSize) {
        this.minSize = minSize;
    }
    public void setMaxSize(int maxSize) {
        this.maxSize = maxSize;
    }
    public List<Path> getFoundFiles(){
        return foundFiles;
    }
}
