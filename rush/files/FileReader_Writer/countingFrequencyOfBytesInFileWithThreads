import java.io.*;
import java.util.HashMap;
import java.util.Map;
/* 
Нити и байты
Читайте с консоли имена файлов, пока не будет введено слово «exit«.
Передайте имя файла в нить ReadThread.
Нить ReadThread должна найти байт, который встречается в файле максимальное число раз, и добавить его в словарь resultMap,
где параметр String — это имя файла, параметр Integer — это искомый байт.
Закрыть потоки.
Требования:
1. Программа должна считывать имена файлов с консоли, пока не будет введено слово "exit".
2. Для каждого файла создай нить ReadThread и запусти ее.
3. После запуска каждая нить ReadThread должна создать свой поток для чтения из файла.
4. Затем, нити должны найти максимально встречающийся байт в своем файле и добавить его в словарь resultMap.
5. Поток для чтения из файла в каждой нити должен быть закрыт.
*/
public class Solution {
    public static Map<String, Integer> resultMap = new HashMap<String, Integer>();

    public static void main(String[] args) {
        BufferedReader consoleReader=new BufferedReader(new InputStreamReader(System.in));
        String file="file";
        try {
            while(!file.equals("exit")){
                file=consoleReader.readLine();//F:\Program Files\tests\test1.txt
                if(file.equals("exit"))break;
                ReadThread readThread=new ReadThread(file);
                readThread.start();
            }
            consoleReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static class ReadThread extends Thread{
        String fileName=null;
        public ReadThread(String fileName){
            this.fileName=fileName;
        }
        @Override
        public void run(){
            int aByte=0;
            int maxFreqV=0;
            int maxFreqK=0;
            HashMap<Integer,Integer>bytes=new HashMap<>();
            try {
                BufferedReader readFile=new BufferedReader(new FileReader(fileName));
                while (readFile.ready()){
                    aByte=readFile.read();
                    if(bytes.containsKey(aByte))bytes.put(aByte,bytes.get(aByte)+1);
                    else bytes.put(aByte,1);
                }
                readFile.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            for(Map.Entry<Integer,Integer> pair: bytes.entrySet()){
                if(maxFreqV<pair.getValue()){
                    maxFreqV=pair.getValue();
                    maxFreqK=pair.getKey();
                }
            }
            resultMap.put(fileName,maxFreqK);
        }
    }
}
