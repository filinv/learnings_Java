import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

/* 
Обращенные слова
В методе main с консоли считать имя файла, который содержит слова, разделенные пробелами.
Найти в тексте все пары слов, которые являются обращением друг друга. Добавить их в result.
Использовать StringBuilder.
Пример содержимого файла
рот тор торт о
о тот тот тот
Вывод:
рот тор
о о
тот тот
Требования:
1. Метод main должен считывать имя файла с клавиатуры.
2. В методе main должен быть использован StringBuilder
3. В классе Solution должен содержаться вложенный класс Pair.
4. В классе Pair должен быть объявлен конструктор без параметров (или конструктор по умолчанию).
5. Список result должен быть заполнен корректными парами согласно условию задачи.
*/
public class Solution {
    public static List<Pair> result = new LinkedList<>();

    public static void main(String[] args) {
        Queue<StringBuilder> words=new LinkedList<>();
        try {
            BufferedReader consoleReader=new BufferedReader(new InputStreamReader(System.in));
            String fileName=consoleReader.readLine();///home/bobah/IdeaProjects/tests/test1.txt
            BufferedReader fileReader=new BufferedReader(new FileReader(fileName));
            while (fileReader.ready()){
                String[] lineBuffer=fileReader.readLine().split("([\\s]+)");
                for(String s:lineBuffer){
                    words.add(new StringBuilder(s));
                }
            }
            fileReader.close();
            consoleReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        StringBuilder sb0=null;
        StringBuilder sb1=null;
        while(!words.isEmpty()){
            sb0=words.poll();
            if(sb0==null)break;
            for(int i=0;i<words.size();i++){
                sb1=words.poll();
                if(sb1==null)break;
                sb1.reverse();
                if(sb0.toString().equals(sb1.toString())){
                    result.add(new Pair());
                    result.get(result.size()-1).second=sb1.reverse().toString();
                    result.get(result.size()-1).first=sb0.toString();
                    break;
                }
                else words.offer(sb1.reverse());
            }
        }
    }

    public static class Pair {
        String first;
        String second;

        public Pair() {
        }
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pair pair = (Pair) o;

            if (first != null ? !first.equals(pair.first) : pair.first != null) return false;
            return second != null ? second.equals(pair.second) : pair.second == null;
        }
        @Override
        public int hashCode() {
            int result = first != null ? first.hashCode() : 0;
            result = 31 * result + (second != null ? second.hashCode() : 0);
            return result;
        }
        @Override
        public String toString() {
            return  first == null && second == null ? "" :
                    first == null && second != null ? second :
                    second == null && first != null ? first :
                    first.compareTo(second) < 0 ? first + " " + second : second + " " + first;
        }
    }
}
