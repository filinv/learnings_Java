import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
/*
Составить цепочку слов
В методе main считай с консоли имя файла, который содержит слова, разделенные пробелом.
В методе getLine используя StringBuilder расставь все слова в таком порядке, чтобы последняя буква данного слова совпадала с первой буквой следующего не учитывая регистр.
Каждое слово должно участвовать 1 раз.
Метод getLine должен возвращать любой вариант.
Слова разделять пробелом.
Вывести полученную строку на экран.
Пример тела входного файла:
Киев Нью-Йорк Амстердам Вена Мельбурн
Результат:
Амстердам Мельбурн Нью-Йорк Киев Вена
Требования:
1. Метод main должен считывать имя файла с клавиатуры.
2. В методе getLine должен быть использован StringBuilder
3. Метод getLine должен возвращать пустую строку(пустой StringBuilder) в случае если ему не были переданы параметры(слова).
4. Все слова переданные в метод getLine должны быть включены в результирующую строку, если это возможно.
5. Вывод на экран должен соответствовать условию задачи.
*/
public class Solution {
    public static void main(String[] args) {
        ArrayList<String>list=new ArrayList<>();
        try {
            BufferedReader consoleReader=new BufferedReader(new InputStreamReader(System.in));
            BufferedReader fileReader=new BufferedReader(new FileReader(consoleReader.readLine()));
            while (fileReader.ready()){///home/bobah/IdeaProjects/tests/test1.txt
                String line=fileReader.readLine();
                String[]buf=line.split("([\\s]+)");
                Collections.addAll(list,buf);
            }
            fileReader.close();
            consoleReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String[]a=new String[list.size()];
        list.toArray(a);
        StringBuilder result = getLine();
        System.out.println(getLine(a));
    }
    public static StringBuilder getLine(String... words) {
          StringBuilder result=new StringBuilder();
          StringBuilder pivot=new StringBuilder();
          Queue<String> buffer=new ConcurrentLinkedQueue<>();
          Arrays.sort(words);
          Collections.addAll(buffer,words);
          int count=0;
          int size=buffer.size();
          while (!buffer.isEmpty()){
              if(result.length()>1){
                  pivot=pivot.append(buffer.poll());
                  if(pivot.charAt(0)+32==result.charAt(result.length()-1)){
                      result.append(" ").append(pivot.toString());
                      pivot.delete(0,pivot.length());
                  }
                  else if(pivot.charAt(pivot.length()-1)==result.charAt(0)+32){
                      result.insert(0,pivot.append(" ").toString());
                      pivot.delete(0,pivot.length());
                  }
                  else{
                      count++;
                      buffer.offer(pivot.toString());
                      pivot.delete(0,pivot.length());
                      if(count==size)break;
                  }
              }
              else {
                  result.append(buffer.poll());
              }
          }
          if(!buffer.isEmpty()){
              while (!buffer.isEmpty()){
                  result.append(" ").append(buffer.poll());
              }
          }
          return result;
    }
}
