/* 
Запретить клонирование
1. Класс A должен поддерживать интерфейс Cloneable.
2. Класс B должен быть потомком класса A.
3. При объявлении класса B не должно быть явно указано implements Cloneable.
4. Метод clone в классе B должен быть переопределен таким образом, чтобы при попытке клонирования объекта класса B возникало исключение CloneNotSupportedException.
5. Класс C должен быть потомком класса B.
6. Клонирование объектов класса C должно завершаться успешно.
*/
public class Solution {
    public static class A implements Cloneable {
        private int i;
        private int j;

        public A(int i, int j) {
            this.i = i;
            this.j = j;
        }
        public int getI() {
            return i;
        }
        public int getJ() {
            return j;
        }
    }
    public static class B extends A {
        private String name;

        public B(int i, int j, String name) {
            super(i, j);
            this.name = name;
        }
        @Override
        protected Object clone() throws CloneNotSupportedException {
            throw new CloneNotSupportedException();
        }
        public String getName() {
            return name;
        }
    }
    public static class C extends B {
        public C(int i, int j, String name) {
            super(i, j, name);
        }
        @Override
        protected Object clone() throws CloneNotSupportedException {
            C result=new C(getI(),getJ(),getName());
            return result;
        }
    }
    public static void main(String[] args) {
        C first=new C(1,2,"first");
        C second=null;
        try {
            second=(C)first.clone();
            System.out.println(first);
            System.out.println(second);
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
    }
}
