Чат (15)
Напишем реализацию класса SocketThread. Начнем с простых вспомогательных методов.
Добавь методы, которые будут доступны классам потомкам и не доступны остальным классам вне пакета:
1) void processIncomingMessage(String message) - должен выводить текст message в консоль.
2) void informAboutAddingNewUser(String userName) - должен выводить в консоль информацию о том, что участник с именем userName присоединился к чату.
3) void informAboutDeletingNewUser(String userName) - должен выводить в консоль, что участник с именем userName покинул чат.
4) void notifyConnectionStatusChanged(boolean clientConnected) - этот метод должен:
а) Устанавливать значение поля clientConnected внешнего объекта Client в соответствии с переданным параметром.
б) Оповещать (пробуждать ожидающий) основной поток класса Client.
Подсказка: используй синхронизацию на уровне текущего объекта внешнего класса и метод notify. Для класса SocketThread внешним классом является класс Client.
Требования:
1. Метод processIncomingMessage должен выводить на экран сообщение полученное в качестве параметра.
2. Метод informAboutAddingNewUser должен выводить на экран сообщение о том что пользователь подключился к чату.
3. Метод informAboutDeletingNewUser должен выводить на экран сообщение о том что пользователь покинул чат.
4. Метод notifyConnectionStatusChanged должен устанавливать значение поля clientConnected внешнего объекта Client равным полученному параметру.
5. Метод notifyConnectionStatusChanged должен вызвать метод notify на внешнем объекте Client.

Чат (14)
Приступим к написанию главного функционала класса Client.
1. Добавь метод void run(). Он должен создавать вспомогательный поток SocketThread, ожидать пока тот установит соединение с сервером, а после этого в цикле считывать сообщения с консоли и отправлять их серверу. Условием выхода из цикла будет отключение клиента или ввод пользователем команды 'exit'.
Для информирования главного потока, что соединение установлено во
вспомогательном потоке, используй методы wait и notify объекта класса Client.
Реализация метода run должна:
а) Создавать новый сокетный поток с помощью метода getSocketThread.
б) Помечать созданный поток как daemon, это нужно для того, чтобы при выходе из программы вспомогательный поток прервался автоматически.
в) Запустить вспомогательный поток.
г) Заставить текущий поток ожидать, пока он не получит нотификацию из другого потока. Подсказка: используй wait и синхронизацию на уровне объекта. Если во время ожидания возникнет исключение, сообщи об этом пользователю и выйди из программы.
д) После того, как поток дождался нотификации, проверь значение clientConnected. Если оно true - выведи "Соединение установлено. Для выхода наберите команду 'exit'.". Если оно false - выведи "Произошла ошибка во время работы клиента.".
е) Считывай сообщения с консоли пока клиент подключен. Если будет введена команда 'exit', то выйди из цикла.
ж) После каждого считывания, если метод shouldSendTextFromConsole() возвращает true, отправь считанный текст с помощью метода sendTextMessage().
2. Добавь метод main(). Он должен создавать новый объект типа Client и вызывать у него метод run().
Требования:
1. Метод main должен создавать новый объект типа Client и вызывать у него метод run.
2. Метод run должен создавать запускать новый поток, полученный с помощью метода getSocketThread.
3. Поток созданный с помощью метода getSocketThread должен быть отмечен как демон (setDaemon(true)).
4. После запуска нового socketThread метод run должен ожидать до тех пор, пока не будет пробужден.
5. До тех пор, пока флаг clientConnected равен true,с консоли должны считываться сообщения с помощью метода ConsoleHelper.readString.
6. Если была введена команда "exit" цикл считывания сообщений должен быть прерван.
7. Если метод shouldSentTextFromConsole возвращает true, должен быть вызван метод sendTextMessage со считанным текстом в качестве параметра.

Чат (13)
Продолжаем реализацию вспомогательных методов класса Client.
Добавь в класс методы, которые будут доступны классам потомкам, но не доступны из других классов вне пакета:
1. String getServerAddress() - должен запросить ввод адреса сервера у пользователя и вернуть введенное значение. Адрес может быть строкой, содержащей ip, если клиент и сервер запущен на разных машинах или 'localhost', если клиент и сервер работают на одной машине.
2. int getServerPort() - должен запрашивать ввод порта сервера и возвращать его.
3. String getUserName() - должен запрашивать и возвращать имя пользователя.
4. boolean shouldSendTextFromConsole() - в данной реализации клиента всегда должен возвращать true (мы всегда отправляем текст введенный в консоль). Этот метод может быть переопределен, если мы будем писать какой-нибудь другой клиент, унаследованный от нашего, который не должен отправлять введенный в консоль текст.
5. SocketThread getSocketThread() - должен создавать и возвращать новый объект класса SocketThread.
6. void sendTextMessage(String text) - создает новое текстовое сообщение, используя переданный текст и отправляет его серверу через соединение connection.
Если во время отправки произошло исключение IOException, то необходимо вывести
информацию об этом пользователю и присвоить false полю clientConnected.
Требования:
1. Метод getServerAddress должен возвращать строку (адрес сервера), считанную с консоли.
2. Метод getServerPort должен возвращать число (порт сервера), считанное с консоли.
3. Метод getUserName должен возвращать строку (имя пользователя), считанную с консоли.
4. Метод shouldSendTextFromConsole должен возвращать true.
5. Метод sendTextMessage должен создавать и отправлять новое текстовое сообщение используя connection и устанавливать флаг clientConnected в false, если во время отправки или создания сообщения возникло исключение IOException.
6. Метод getSocketThread должен возвращать новый объект типа SocketThread.

Чат (12)
Приступим к написанию клиента. Клиент, в начале своей работы, должен запросить у пользователя адрес и порт сервера, подсоединиться к указанному адресу, получить запрос имени от сервера, спросить имя у пользователя, отправить имя пользователя серверу, дождаться принятия имени сервером. После этого клиент может обмениваться текстовыми сообщениями с сервером. Обмен сообщениями будет происходить в двух параллельно работающих потоках. Один будет заниматься чтением из консоли и отправкой прочитанного серверу, а второй поток будет получать данные от сервера и выводить их в консоль.
Начнем реализацию клиента:
1) Создай пакет client. В дальнейшем все классы, отвечающие за реализацию клиентов, создавай в этом пакете.
2) Создай класс Client.
3) Создай внутренний класс SocketThread унаследованный от Thread в классе Client. Он будет отвечать за поток, устанавливающий сокетное соединение и читающий сообщения сервера. Класс должен иметь публичный модификатор доступа.
4) Создай поле Connection connection в классе Client. Используй модификатор доступа, который позволит обращаться к этому полю из класса потомков, но запретит обращение из других классов вне пакета.
5) Добавь приватное поле-флаг boolean clientConnected в класс Client. Проинициализируй его значением false. В дальнейшем оно будет устанавливаться в true, если клиент подсоединен к серверу или в false в противном случае. При объявлении этого поля используй ключевое слово, которое позволит гарантировать что каждый поток, использующий поле clientConnected, работает с актуальным, а не кэшированным его значением.
Требования:
1. Класс Client должен быть создан в пакете client.
2. В классе Client должен быть создан публичный класс SocketThread унаследованный от Thread.
3. В классе Client должно быть создано protected поле connection типа Connection.
4. В классе Client должно быть создано private volatile поле clientConnected типа boolean.

Чат (11)
Пришло время написать главный метод класса Handler, который будет вызывать все
вспомогательные методы, написанные ранее. Реализуем метод void run() в классе Handler.
Он должен:
1. Выводить сообщение, что установлено новое соединение с удаленным адресом, который можно получить с помощью метода getRemoteSocketAddress.
2. Создавать Connection, используя поле socket.
3. Вызывать метод, реализующий рукопожатие с клиентом, сохраняя имя нового клиента.
4. Рассылать всем участникам чата информацию об имени присоединившегося участника (сообщение с типом USER_ADDED). Подумай, какой метод подойдет для этого лучше всего.
5. Сообщать новому участнику о существующих участниках.
6. Запускать главный цикл обработки сообщений сервером.
7. Обеспечить закрытие соединения при возникновении исключения.
8. Отловить все исключения типа IOException и ClassNotFoundException, вывести в консоль информацию, что произошла ошибка при обмене данными с удаленным адресом.
9. После того как все исключения обработаны, если п.11.3 отработал и возвратил нам имя, мы должны удалить запись для этого имени из connectionMap и разослать всем остальным участникам сообщение с типом USER_REMOVED и сохраненным именем.
10. Последнее, что нужно сделать в методе run() - вывести сообщение, информирующее что соединение с удаленным адресом закрыто.
Наш сервер полностью готов. Попробуй его запустить.
Требования:
1. Метод run должен выводить на экран сообщение о том, что было установлено соединение с удаленным адресом (используя метод getRemoteSocketAddress).
2. Метод run должен создавать новое соединение (connection) используя в качестве параметра поле socket.
3. Метод run должен вызывать метод serverHandshake используя в качестве параметра только что созданное соединение; результатом будет имя пользователя (userName).
4. Метод run должен вызывать метод sendBroadcastMessage используя в качестве параметра новое сообщение (MessageType.USER_ADDED, userName).
5. Метод run должен вызывать метод sendListOfUsers используя в качестве параметров connection и userName.
6. Метод run должен вызывать метод serverMainLoop используя в качестве параметров connection и userName.
7. Прежде чем завершиться, метод run должен удалять из connectionMap запись соответствующую userName, и отправлять всем участникам чата сообщение о том, что текущий пользователь был удален.
8. Метод run должен корректно обрабатывать исключения IOException и ClassNotFoundException.

Чат (10)
Этап третий - главный цикл обработки сообщений сервером.
Добавь приватный метод void serverMainLoop(Connection connection, String userName) throws IOException, ClassNotFoundException, где значение параметров такое же, как и у метода
sendListOfUsers.
Он должен:
1. Принимать сообщение клиента
2. Если принятое сообщение - это текст (тип TEXT), то формировать новое текстовое сообщение путем конкатенации: имени клиента, двоеточия, пробела и текста сообщения. Например, если мы получили сообщение с текстом "привет чат" от пользователя "Боб", то нужно сформировать сообщение "Боб: привет чат".
3. Отправлять сформированное сообщение всем клиентам с помощью метода sendBroadcastMessage.
4. Если принятое сообщение не является текстом, вывести сообщение об ошибке
5. Организовать бесконечный цикл, внутрь которого перенести функционал пунктов 10.1-10.4.
Требования:
1. В классе Handler должен быть создан метод private void serverMainLoop(Connection connection, String userName).
2. Метод serverMainLoop должен в бесконечном цикле получать сообщения от клиента (используя метод receive класса Connection).
3. Если сообщение, полученное методом serverMainLoop, имеет тип MessageType.TEXT, то должно быть отправлено новое сообщение всем участникам чата используя метод sendBroadcastMessage (форматирование сообщения описано в условии).
4. Если сообщение, полученное методом serverMainLoop, имеет тип отличный от MessageType.TEXT, метод sendBroadcastMessage не должен быть вызван, и должно быть выведено сообщение об ошибке.

Чат (9)
Этап второй, но не менее важный - отправка клиенту (новому участнику) информации об
остальных клиентах (участниках) чата.
Для этого:
1) Добавь приватный метод void sendListOfUsers(Connection connection, String userName) throws IOException, где connection - соединение с участником, которому будем слать информацию, а userName - его имя. Метод должен:
2) Пройтись по connectionMap.
3) У каждого элемента из п.2 получить имя клиента, сформировать команду с типом USER_ADDED и полученным именем.
4) Отправить сформированную команду через connection.
5) Команду с типом USER_ADDED и именем равным userName отправлять не нужно, пользователь и так имеет информацию о себе.
Требования:
1. В классе Handler должен быть создан метод private void sendListOfUsers(Connection connection, String userName).
2. Метод sendListOfUsers должен отправлять через connection сообщение о том, что был добавлен пользователь с именем name для каждого имени из connectionMap.
3. Метод sendListOfUsers НЕ должен отправлять сообщение о добавлении пользователя, если имя пользователя совпадает со вторым параметром метода (userName).

Чат (8)
Класс Handler должен реализовывать протокол общения с клиентом.
Выделим из протокола отдельные этапы и реализуем их с помощью отдельных методов:
Этап первый - это этап рукопожатия (знакомства сервера с клиентом). Реализуем его с
помощью приватного метода String serverHandshake(Connection connection) throws IOException, ClassNotFoundException. Метод в качестве параметра принимает соединение connection, а возвращает имя нового клиента.

Реализация метода должна:
1) Сформировать и отправить команду запроса имени пользователя
2) Получить ответ клиента
3) Проверить, что получена команда с именем пользователя
4) Достать из ответа имя, проверить, что оно не пустое и пользователь с таким именем еще не подключен (используй connectionMap)
5) Добавить нового пользователя и соединение с ним в connectionMap
6) Отправить клиенту команду информирующую, что его имя принято
7) Если какая-то проверка не прошла, заново запросить имя клиента
8) Вернуть принятое имя в качестве возвращаемого значения
Требования:
1. В классе Handler должен присутствовать метод private String serverHandshake(Connection connection).
2. Метод serverHandshake должен отправлять запрос имени используя метод send класса Connection.
3. До тех пор, пока тип сообщения полученного в ответ не будет равен MessageType.USER_NAME, запрос имени должен быть выполнен снова.
4. В случае, если в ответ пришло пустое имя, запрос имени должен быть выполнен снова.
5. В случае, если имя уже содержится в connectionMap, запрос имени должен быть выполнен снова.
6. После успешного проведения всех проверок, метод serverHandshake должен добавлять новую пару (имя, соединение) в connectionMap и отправлять сообщение о том, что имя было принято.
7. Метод serverHandshake должен возвращать имя нового клиента с которым было установлено соединение.

Чат (7)
Т.к. сервер может одновременно работать с несколькими клиентами, нам понадобится
метод для отправки сообщения сразу всем.
Добавь в класс Server:
1. Статическое поле Map<String, Connection> connectionMap, где ключом будет имя
клиента, а значением - соединение с ним.
2. Инициализацию поля из п.7.1 с помощью подходящего Map из библиотеки
java.util.concurrent, т.к. работа с этим полем будет происходить из разных потоков и
нужно обеспечить потокобезопасность.
3. Статический метод void sendBroadcastMessage(Message message), который должен
отправлять сообщение message всем соединениям из connectionMap. Если при
отправке сообщение произойдет исключение IOException, нужно отловить его и
сообщить пользователю, что не смогли отправить сообщение.
Требования:
1. В классе Server должно существовать статическое приватное поле connectionMap типа Map.
2. Поле connectionMap должно быть инициализировано потокобезопасной реализаций интерфейса Map из пакета java.util.concurrent.
3. В классе Server должен быть корректно реализован статический метод sendBroadcastMessage(Message message), отправляющий сообщение всем соединениям из connectionMap.

Чат (6)
Приступим к самому важному - написанию класса Server. Сервер должен поддерживать
множество соединений с разными клиентами одновременно. Это можно реализовать с
помощью следующего алгоритма:
- Сервер создает серверное сокетное соединение.
- В цикле ожидает, когда какой-то клиент подключится к сокету.
- Создает новый поток обработчик Handler, в котором будет происходить обмен
сообщениями с клиентом.
- Ожидает следующее соединение.
Добавь:
1)	В класс Server приватный статический вложенный класс Handler, унаследованный от Thread.
2)	В класс Handler поле socket типа Socket.
3)	В класс Handler конструктор, принимающий в качестве параметра Socket и
инициализирующий им соответствующее поле класса.
4)	Метод main класса Server, должен:
а) Запрашивать порт сервера, используя ConsoleHelper.
б) Создавать серверный сокет java.net.ServerSocket, используя порт из предыдущего пункта.
в) Выводить сообщение, что сервер запущен.
г) В бесконечном цикле слушать и принимать входящие сокетные соединения только что созданного
серверного сокета.
д) Создавать и запускать новый поток Handler, передавая в конструктор сокет из предыдущего пункта.
е) После создания потока обработчика Handler переходить на новый шаг цикла.
ж) Предусмотреть закрытие серверного сокета в случае возникновения исключения.
з) Если исключение Exception все же произошло, поймать его и вывести сообщение об ошибке.
Требования:
1. В классе Server должен быть создан приватный статический класс Handler, унаследованный от класса Thread.
2. В классе Handler должно быть создано поле socket типа Socket.
3. Конструктор класса Handler должен принимать один параметр типа Socket и инициализировать поле socket.
4. Метод main должен считывать с клавиатуры порт сервера используя метод readInt класса ConsoleHelper.
5. Метод main должен корректно реализовывать бесконечный цикл описанный в условии задачи.

Чат (5)
Клиент и сервер будут общаться через сокетное соединение. Одна сторона будет
записывать данные в сокет, а другая читать. Их общение представляет собой обмен
сообщениями Message. Класс Connection будет выполнять роль обертки над классом
java.net.Socket, которая должна будет уметь сериализовать и десериализовать объекты
типа Message в сокет. Методы этого класса должны быть готовы к вызову из разных
потоков.

Добавь в класс Connection:
1) Final поля:
а) Socket socket
б) ObjectOutputStream out
в) ObjectInputStream in
2) Конструктор, который должен принимать Socket в качестве параметра и
инициализировать поля класса. Для инициализации полей in и out используй
соответствующие потоки сокета. Конструктор может бросать исключение IOException.
Создать объект класса ObjectOutputStream нужно до того, как будет создаваться объект
класса ObjectInputStream, иначе может возникнуть взаимная блокировка потоков,
которые хотят установить соединение через класс Connection. Более подробно об этом
ты можешь прочитать в спецификации класса ObjectInputStream.
3) Метод void send(Message message) throws IOException. Он должен записывать
(сериализовать) сообщение message в ObjectOutputStream. Этот метод будет
вызываться из нескольких потоков. Позаботься, чтобы запись в объект
ObjectOutputStream была возможна только одним потоком в определенный момент
времени, остальные желающие ждали завершения записи. При этом другие методы
класса Connection не должны быть заблокированы.
4) Метод Message receive() throws IOException, ClassNotFoundException. Он должен читать
(десериализовать) данные из ObjectInputStream. Сделай так, чтобы операция чтения
не могла быть одновременно вызвана несколькими потоками, при этом вызов других
методы класса Connection не блокировать.
5) Метод SocketAddress getRemoteSocketAddress(), возвращающий удаленный адрес
сокетного соединения.
6) Метод void close() throws IOException, который должен закрывать все ресурсы класса.

Класс Connection должен поддерживать интерфейс Closeable.
Требования:
1. Класс Connection должен поддерживать интерфейс Closeable.
2. В классе Connection должно быть создано private final поле socket типа Socket.
3. В классе Connection должно быть создано private final поле out типа ObjectOutputStream.
4. В классе Connection должно быть создано private final поле in типа ObjectInputStream.
5. В классе Connection должен быть создан конструктор с одним параметром типа Socket инициализирующий поля класса в соответствии с условием задачи.
6. В классе Connection должен быть корректно реализован метод send c одним параметром типа Message.
7. В классе Connection должен быть корректно реализован метод receive без параметров.
8. Метод getRemoteSocketAddress класса Connection должен возвращать удаленный адрес сокетного соединения.
9. Метод close класса Connection должен закрывать потоки чтения, записи и сокетное соединение.

Чат (4)
Сообщение Message - это данные, которые одна сторона отправляет, а вторая принимает.
Каждое сообщение должно иметь тип MessageType, а некоторые и дополнительные
данные, например, текстовое сообщение должно содержать текст. Т.к. сообщения будут
создаваться в одной программе, а читаться в другой, удобно воспользоваться механизмом
сериализации для перевода класса в последовательность битов и наоборот.
Добавь в класс Message:
1) Поддержку интерфейса Serializable.
2) final поле типа MessageType type, которое будет содержать тип сообщения.
3) final поле типа String data, которое будет содержать данные сообщения.
4) Геттеры для этих полей.
5) Конструктор, принимающий только MessageType, он должен проинициализировать
поле type переданным параметром, а поле data оставить равным null.
6) Конструктор, принимающий MessageType type и String data. Он должен также
инициализировать все поля класса.
Требования:
1. Класс Message должен поддерживать интерфейс Serializable.
2. Приватное поле type в классе Message должно быть объявлено с модификатором final и быть типа MessageType.
3. Приватное поле data в классе Message должно быть объявлено с модификатором final и быть типа String.
4. В классе Message должны быть созданы корректные геттеры для полей data и type.
5. Конструктор класса Message с одним параметром типа MessageType должен инициализировать поле type и оставлять поле data равным null.
6. Конструктор класса Message с двумя параметрами (MessageType и String) должен инициализировать поля type и data.

Чат (3)
Прежде, чем двигаться дальше, нужно разработать протокол общения клиента и сервера.
Сформулируем основные моменты протокола:
- Когда новый клиент хочет подсоединиться к серверу, сервер должен запросить имя
клиента.
- Когда клиент получает запрос имени от сервера он должен отправить свое имя серверу.
- Когда сервер получает имя клиента он должен принять это имя или запросить новое.
- Когда новый клиент добавился к чату, сервер должен сообщить остальным участникам о
новом клиенте.
- Когда клиент покидает чат, сервер должен сообщить остальным участникам об этом.
- Когда сервер получает текстовое сообщение от клиента, он должен переслать его всем
остальным участникам чата.
Добавь для каждого пункта вышеописанного протокола соответствующее значение в enum
MessageType:
1) NAME_REQUEST - запрос имени.
2) USER_NAME - имя пользователя.
3) NAME_ACCEPTED - имя принято.
4) TEXT - текстовое сообщение.
5) USER_ADDED - пользователь добавлен.
6) USER_REMOVED - пользователь удален.
Требования:
1. В перечислении MessageType должен присутствовать элемент NAME_REQUEST.
2. В перечислении MessageType должен присутствовать элемент USER_NAME.
3. В перечислении MessageType должен присутствовать элемент NAME_ACCEPTED.
4. В перечислении MessageType должен присутствовать элемент TEXT.
5. В перечислении MessageType должен присутствовать элемент USER_ADDED.
6. В перечислении MessageType должен присутствовать элемент USER_REMOVED.

Чат (2)
Первым делом, для удобства работы с консолью реализуем класс ConsoleHelper. В
дальнейшем, вся работа с консолью должна происходить через этот класс.
Добавь в него:
1. Статическое поле типа BufferedReader, инициализированное с помощью System.in.
2. Статический метод writeMessage(String message), который должен выводить
сообщение message в консоль.
3. Статический метод String readString(), который должен считывать строку с
консоли. Если во время чтения произошло исключение, вывести пользователю
сообщение "Произошла ошибка при попытке ввода текста. Попробуйте еще раз." И
повторить ввод. Метод не должен пробрасывать исключения IOException наружу.
Другие исключения не должны обрабатываться.
4. Статический метод int readInt(). Он должен возвращать введенное число и
использовать метод readString(). Внутри метода обработать исключение
NumberFormatException. Если оно произошло вывести сообщение "Произошла ошибка
при попытке ввода числа. Попробуйте еще раз." И повторить ввод числа.

В этой задаче и далее, если не указано дополнительно другого, то все поля класса должны
быть приватными, а методы публичными.
Требования:
1. В классе ConsoleHelper должно быть создано и инициализировано приватное, не финальное, статическое поле типа BufferedReader.
2. В классе ConsoleHelper должен быть реализован статический метод writeMessage(String message), выводящий сообщение на консоль.
3. В классе ConsoleHelper должен быть реализован статический метод readString, возвращающий строку считанную с консоли.
4. В классе ConsoleHelper должен быть реализован статический метод readInt, возвращающий число считанное с консоли.
5. Метод readInt должен использовать метод readString для чтения с консоли.
6. Метод readString должен перехватывать IOException, выводить сообщение о некорректном вводе и повторять считывание с консоли.
7. Метод readInt должен перехватывать NumberFormatException, выводить сообщение о некорректном вводе и повторять считывание с консоли.

Чат (1)
Сегодня мы напишем чат. Набор программ с помощью которого можно будет
обмениваться текстовыми сообщения. Набор будет состоять из одного сервера и
нескольких клиентов, по одному для каждого участника чата.
Начнем с сервера. Нам понадобятся такие классы:
1) Server - основной класс сервера.
2) MessageType - enum, который отвечает за тип сообщений пересылаемых между
клиентом и сервером.
3) Message - класс, отвечающий за пересылаемые сообщения.
4) Connection - класс соединения между клиентом и сервером.
5) ConsoleHelper - вспомогательный класс, для чтения или записи в консоль.

Создай эти классы и добавь метод main в класс Server.

Требования:
1. Класс Server должен быть публичным и создан в отдельном файле.
2. Перечисление MessageType должно быть публичным и создано в отдельном файле.
3. Класс Message должен быть публичным и создан в отдельном файле.
4. Класс Connection должен быть публичным и создан в отдельном файле.
5. Класс ConsoleHelper должен быть публичным и создан в отдельном файле.
6. В классе Server должен быть создан метод public static void main(String[] args).
