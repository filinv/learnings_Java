Тетрис(1)
Давай напишем игру Тетрис!
Наш Тетрис будет состоять из двух вещей: поля из клеток и фигурки, которая падает.
Поэтому для начала создай три класса: Field(поле с клетками), Figure(фигура) и сам Tetris.
Также нам понадобится метод main в классе Tetris.
Требования:
1. Класс Field должен быть создан в отдельном файле.
2. Класс Figure должен быть создан в отдельном файле.
3. Класс Tetris должен быть создан в отдельном файле.
4. Класс Tetris должен содержать метод main.

Тетрис(2)
Отлично!
Теперь добавь в класс Tetris два поля: field типа Field и figure типа Figure.
Требования:
1. Поле field типа Field должно быть создано в классе Tetris.
2. Поле figure типа Figure должно быть создано в классе Tetris.
3. Поле field должно быть объявлено с модификатором доступа private.
4. Поле figure должно быть объявлено с модификатором доступа private.

Тетрис(3)
Поле есть, фигура есть, а как их получить?
Добавь геттеры для полей field и figure.
Требования:
1. В классе Tetris должен быть создан метод getField без параметров.
2. В классе Tetris должен быть создан метод getFigure без параметров.
3. Метод getField должен быть объявлен с самым широким типом доступа.
4. Метод getFigure должен быть объявлен с самым широким типом доступа.
5. Метод getField должен возвращать значение поля field.
6. Метод getFigure должен возвращать значение поля figure.

Тетрис(4)
Так же еще нам понадобится пара методов.
Добавь в класс Tetris методы run() и step():
run() будет отвечать за всю игру.
А step() - за один шаг в игре.
Тип возвращаемого значения void для обоих методов.
Тут и в будущем, если нет явных указаний с каким модификатором доступа создавать метод,
то он должен быть публичным, а поле приватным.
*В общем случае, стоит руководствоваться правилом использования наиболее строгого(из возможных) модификатора доступа.
*Т.е. если логика системы предполагает обращения к методу извне класса, мы не сможем сделать такой метод приватным.
*Но также нет никаких причин указывать уровень доступа public для методов которые будут использованы только в рамках пакета.
*Поначалу это кажется несущественным, но на самом деле это один из основополагающих принципов ООП.
*Учись сразу делать правильно!
Требования:
1. В классе Tetris должен быть создан метод run без параметров.
2. В классе Tetris должен быть создан метод step без параметров.
3. Метод run НЕ должен быть приватным.
4. Метод step НЕ должен быть приватным.
5. Метод run не должен возвращать значение.
6. Метод step не должен возвращать значение.

Тетрис(5)
Теперь нужно создать объект самого Тетриса.
Добавь в класс Tetris статическое поле game типа Tetris.
Поле game НЕ должно быть приватным.
Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
Затем добавь вызов метода run.
Требования:
1. В классе Tetris должно быть создано поле game.
2. Поле game НЕ должно быть приватным.
3. Поле game должно быть статическим.
4. Поле game должно быть типа Tetris.
5. В методе main поле game должно быть инициализировано новым объектом типа Tetris.
6. В методе main должен быть вызван метод run на объекте сохраненном в поле game.

Тетрис(6)
Теперь перейдем к классу Field.
Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с двумя параметрами width и height. И не забудь про матрицу.
ВАЖНО!
Двумерный массив можно представить как массив массивов или как прямоугольную матрицу.
При этом первой координатой в массиве у нас будет номер строки, а второй - столбца.
Другими словами ячейка с координатами x, y - это matrix[y][x].
Требования:
1. В классе Field должно быть создано приватное поле width типа int.
2. В классе Field должно быть создано приватное поле height типа int.
3. В классе Field должно быть создано приватное поле matrix типа int[][](целочисленный двумерный массив).
4. В классе Field должен быть создан корректный геттер для поля height.
5. В классе Field должен быть создан корректный геттер для поля width.
6. В классе Field должен быть создан корректный геттер для поля matrix.
7. В классе Field должен быть создан корректно работающий конструктор с параметрами int, int.
Поле Matrix должно быть инициализировано новым массивом размерностью [y][x] (height и width).

Тетрис(7)
Нам понадобится еще 4 метода в классе Field:
а) print() - объект будет отрисовывать на экран свое текущее состояние;
б) removeFullLines() - будет удалять из матрицы полностью заполненные строки и сдвигать вышележащие строки вниз;
в) Integer getValue(int x, int y) - возвращает значение которое находится в матрице с координатами x и y;
г) void setValue(int x, int y, int value) - устанавливает переданное значение в ячейку массива (матрицы) с координатами x, y.
Требования:
1. В классе Field должен быть создан метод print без параметров.
2. В классе Field должен быть создан метод removeFullLines без параметров.
3. В классе Field должен быть создан метод getValue с двумя параметрами типа int.
4. В классе Field должен быть создан метод setValue c тремя параметрами типа int.
5. Метод print не должен возвращать значение.
6. Метод removeFullLines не должен возвращать значение.
7. Метод getValue должен возвращать значение типа Integer.
8. Метод setValue не должен возвращать значение.

Тетрис(8)
Теперь создадим костяк класса Figure.
Этот класс будет описывать падающую фигурку.
Нам понадобятся ее координаты и форма.
За координаты будут отвечать две переменные x и y.
За форму - матрица. Двумерный массив 3×3, состоящий из единиц и нулей.
Единицей мы обозначаем что клетка есть, нулем - что она пустая.
Добавь в класс Figure два поля поля: x типа int, y типа int.
Еще добавь двумерный массив: matrix(матрица) типа int[][].
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с тремя параметрами x, y, matrix.
Требования:
1. В классе Figure должно быть создано приватное поле x типа int.
2. В классе Figure должно быть создано приватное поле y типа int.
3. В классе Figure должно быть создано приватное поле matrix типа int[][](целочисленный двумерный массив).
4. В классе Figure должен быть создан корректный геттер для поля х.
5. В классе Figure должен быть создан корректный геттер для поля y.
6. В классе Figure должен быть создан корректный геттер для поля matrix.
7. В классе Figure должен быть создан корректно работающий public конструктор с тремя параметрами int,
int и int[][] (x, y и matrix).
