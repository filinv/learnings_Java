//https://habrahabr.ru/post/275813/ about recursion
public class Solution {
    public static void main(String[] args) {
        Solution solution = new Solution();
        solution.recursion("sin(2*(-5+1.5*4)+28)", 0); //expected output 0.5 6
        solution.recursion("tan(sin(2*(-5+1.5*4)+28))+cos(2^(2-8*0.125))", 0); //expected output 1.01 11
    }

    public void recursion(final String expression, int countOperation) {
        double result=0;
        if(countOperation>0){
            if(expression.contains("([\\d\\.]+)")&&!expression.contains("([\\(\\)\\^\\*\\-\\+]+)")){
                result=Double.parseDouble(expression);
                System.out.format("%.2f %d",result,countOperation);
                return;
            }
            String workPlace;
            if(expression.contains(" ")){
                workPlace=expression.replaceAll(" ","");
                recursion(workPlace,countOperation);
            }
            if(expression.contains("(")){
                workPlace=expression.substring(expression.lastIndexOf("(")+1,expression.indexOf(")"));
                recursion(workPlace,countOperation);
            }
            if(expression.contains("^")){
                int index=expression.indexOf("^");
                String left=expression.substring(0,index);
                String right=expression.substring(index);
            }
        }
        else {
            String signs[]=expression.split("([\\d\\)\\(\\.]+)");//we need signs.length
            countOperation=signs.length;
            recursion(expression,countOperation);
        }
    }

    public Solution() {
        //don't delete
    }
}
