import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

/*
И еще один адаптер
Адаптировать Scanner к PersonScanner.
Классом-адаптером является PersonScannerAdapter.
В классе адаптере создать приватное финальное поле Scanner fileScanner. Поле инициализировать в конструкторе с одним аргументом
типа Scanner.
Данные в файле хранятся в следующем виде:
Иванов Иван Иванович 31 12 1950
Петров Петр Петрович 31 12 1957
В файле хранится большое количество людей, данные одного человека находятся в одной строке.
Метод read() должен читать данные только одного человека.
Требования:
1. PersonScanner должен быть интерфейсом.
2. Класс PersonScannerAdapter должен реализовывать интерфейс PersonScanner.
3. Класс PersonScannerAdapter должен содержать приватное поле fileScanner типа Scanner.
4. Класс PersonScannerAdapter должен содержать конструктор с параметром Scanner.
5. Метод close() класса PersonScannerAdapter должен делегировать полномочие такому же методу fileScanner.
6. Метод read() класса PersonScannerAdapter должен читать строку с файла, парсить её, и возвращать
данные только одного человека, в виде объекта класса Person.
*/
public class Solution {

    public static void main(String[] args) {
        String name = "Иванов Иван Иванович 31 12 1993";
        PersonScannerAdapter adapter = new PersonScannerAdapter(new Scanner(name));
        try {
            System.out.println(adapter.read());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e1){
            e1.printStackTrace();
        }
    }
    public static class PersonScannerAdapter implements PersonScanner{
        private Scanner fileScanner;
        public PersonScannerAdapter(Scanner fileScanner){
            this.fileScanner=fileScanner;
        }
        @Override
        public Person read() throws IOException, ParseException {
            Person somePerson=null;
            String lastName=fileScanner.next();
            String firstName=fileScanner.next();
            String middleName=fileScanner.next();
            String d=fileScanner.next();
            String m=fileScanner.next();
            String y=fileScanner.next();
            SimpleDateFormat dateFormat=new SimpleDateFormat("ddMMyyyy");
            Date date= dateFormat.parse(d+m+y);
            return somePerson=new Person(firstName,middleName,lastName,date);
        }
        @Override
        public void close() throws IOException {
            fileScanner.close();
        }
    }
}
public interface PersonScanner {
    Person read() throws IOException, ParseException;
    void close() throws IOException;
}
public class Person {
    private String firstName;
    private String middleName;
    private String lastName;
    private Date birthDate;

    public Person(String firstName, String middleName, String lastName, Date birthDate) {
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.birthDate = birthDate;
    }
    @Override
    public String toString() {
        SimpleDateFormat simpleDateFormat=new SimpleDateFormat("dd MM yyyy");
        return String.format("%s %s %s %s", lastName, firstName, middleName, simpleDateFormat.format(birthDate));
    }
}
